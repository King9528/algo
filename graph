#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class Graph
{
    private: int edge,vertex;
    vector<vector<int>> adjlist;
    vector<bool> v2;
    vector<int>color;
    queue<int> q;
    
    public:
    Graph(int v,int e)
    {
        edge=e;
        vertex=v;
        adjlist.resize(v);
        v2.resize(v,false);
        color.resize(v,0);
    }
    void input()
    {
       cout<<"Enter the edges of the graph:"<<endl;
       int u,v;
       for(int i=0;i<edge;i++)
       {
        cin>>u>>v;
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
       }
    }
    void display()
    {
     cout<<"The undirected graph entered is:-"<<endl;
     for(int i=0;i<vertex;i++)
     {
        cout<<i<<" |-->";
        for(int j=0;j<adjlist[i].size();j++)
        {
            cout<<adjlist[i][j]<<" ";
        }
        cout<<endl;
     }
    }
    vector<int> bfs()
    {
      vector<int> bfsresult;
      vector<bool> visited(vertex,false);
      int strt,u;
      cout<<"Enter the start vertex for BFS:";
      cin>>strt;
      q.push(strt);
      visited[strt]=true;
      while(!q.empty())
      {
        u=q.front();
        q.pop();
        bfsresult.push_back(u);
        for(int v:adjlist[u])//u is parent and v is child
        {
            if(!visited[v])
            {
                visited[v]=true;
                q.push(v);
            }
        }
      }
      return bfsresult;
    }
    
    void bfsDisplay(vector<int> bfsresult)
    {
        cout<<"Your BFS is :";
         for(int t:bfsresult)
         {
            cout<<t<<" ";
         }
    }
    int DFS(int strt)
    {
      int count=0;
      v2[strt]=true;
      cout<<strt<<" ";
      for(int v:adjlist[strt])
      {
        if(!v2[v])
        {
            DFS(v);
            count++;
        }
      }
      return count;
    }
    bool bipartite_check()
    {
      vector<int> bfsresult2;
      vector<bool> visited2(vertex,false);
      int strt,u;
      cout<<"Enter the start vertex for BFS:";
      cin>>strt;
      q.push(strt);
      visited2[strt]=true;
      while(!q.empty())
      {
        u=q.front();
        q.pop();
        bfsresult2.push_back(u);
        for(int v:adjlist[u])//u is parent and v is child
        {
            if(!visited2[v])
            {
                visited2[v]=true;
                q.push(v);
                color[v]=1-color[v];
            }
            else if(color[v]==color[u])
            return false;
        }
      }
      return true;
    }
};
int main()
{
    int v,e;
    cout<<"Enter the verteces:";
    cin>>v;
    cout<<"Enter the edges :";
    cin>>e;
    Graph g1(v,e);
    g1.input();
    g1.display();
   //vector<int> bfsresult=g1.bfs();
   //g1.bfsDisplay(bfsresult);
   //first we will count the number of connected components 
   int strt;
   cout<<"Enter the start vertex for DFS:";
   cin>>strt;
   cout<<"DFS=";
   int count=g1.DFS(strt);
   cout<<endl<<"No of connected components is: "<<count;
   bool bp=g1.bipartite_check();
   if(bp)
   cout<<"Graph is Bipartite"<<endl;
   else
   cout<<"Graph is  not Bipartite"<<endl;

   
}
